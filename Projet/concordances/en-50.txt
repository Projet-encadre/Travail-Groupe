t node in a binary tree). The root node at the top (with the    
nt,^[1]^[2]    except for the root node, which has no parent (i.
hich has no parent (i.e., the root node as    the top-most node 
child can be treated like the root node of its own subtree,    m
ne parent, except the topmost root node, which has none. A node 
 that node. The height of the root is the height of the tree.   
the length of the path to its root (i.e., its    root path). Thu
ath to its root (i.e., its    root path). Thus the root node has
, its    root path). Thus the root node has depth zero, leaf nod
y a single node (hence both a root and leaf)    has depth and he
) has height −1.     Each non-root node can be treated as the ro
ot node can be treated as the root node of its own subtree,    w
           between it and the root node.^[4] This is the same as
     Ordered tree           A rooted tree in which an ordering i
→E. There is more than    one root.    Not a tree: undirected cy
t a tree: cycle A→A. A is the root but it also has a parent.    
 to a tree      * Finding the root for any node      * Finding t
sed level by level, where the root node is    visited first, fol
y forest) and node (tree with root node with    given value and 
to be    non-empty):      * A rooted tree with the "away from ro
oted tree with the "away from root" direction (a more narrow    
       + with a distinguished root (one vertex is designated as 
designated as the             root),           + which determine
int away             from the root; given an edge, the node that
, some more    complicated: a rooted tree must be non-empty, hen
d becomes "an empty tree or a rooted    tree such that ...". On 
descendants. For example, the root node by itself is a        su
Section 10.4: Representing    rooted trees, pp. 214–217. Chapter
